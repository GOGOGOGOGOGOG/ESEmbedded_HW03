00000000 <func-0x8>:
   0:   20000100        andcs   r0, r0, r0, lsl #2
   4:   00000045        andeq   r0, r0, r5, asr #32

00000008 <func>:
   8:   b480            push    {r7}
   a:   b083            sub     sp, #12
   c:   af00            add     r7, sp, #0
   e:   6078            str     r0, [r7, #4] //ptrA的位址給r0並且存在r7+4的位址中 （200000d4）
  10:   4b03            ldr     r3, [pc, #12]   ; (20 <func+0x18>) //把全域變數的位址給r3
  12:   607b            str     r3, [r7, #4]  //把r3的值給(r7+4)的位址中複寫過去
  14:   4618            mov     r0, r3 
  16:   370c            adds    r7, #12
  18:   46bd            mov     sp, r7
  1a:   f85d 7b04       ldr.w   r7, [sp], #4 //回復成原來舊r7的位址 200000e0
  1e:   4770            bx      lr
  20:   00000088        andeq   r0, r0, r8, lsl #1

00000024 <funD>:
  24:   b480            push    {r7}
  26:   b083            sub     sp, #12
  28:   af00            add     r7, sp, #0
  2a:   6078            str     r0, [r7, #4] //ptrB的位址給r0並且存在r7+4的位址中 （200000d4）
  2c:   687b            ldr     r3, [r7, #4] //把r7+4的位址給r3
  2e:   4a04            ldr     r2, [pc, #16]   ; (40 <funD+0x1c>) //r2接收了全域變數的位址
  30:   601a            str     r2, [r3, #0] //r2的位址給r3+0並且存在內存中
  32:   4618            mov     r0, r3 
  34:   370c            adds    r7, #12
  36:   46bd            mov     sp, r7
  38:   f85d 7b04       ldr.w   r7, [sp], #4
  3c:   4770            bx      lr
  3e:   bf00            nop
  40:   0000008c        andeq   r0, r0, ip, lsl #1

00000044 <reset_handler>:
  44:   b580            push    {r7, lr}   //保留r7到內存的stack Keep the callee saved registers 一旦調用子函數 我們就需要lr來保存返回值
  46:   b086            sub     sp, #24    //s_stack_frame_size 和宣告幾個變數有關(6*4)
  48:   af00            add     r7, sp, #0 // adds the current value of the stack pointer i.e =>the address of the current stack top
  4a:   2301            movs    r3, #1     //將1的值放入r3暫存器中
  4c:   60fb            str     r3, [r7, #12]  //表示將r3的值存入(r7-12)所指向的位址中 （表 1）  從寄存器搬到內存(stack)中
  4e:   2303            movs    r3, #3  //將3的值放入r3暫存器中 
  50:   60bb            str     r3, [r7, #8] //表示將r3的值存入(r7-8)所指向的位址中 （表 3） 從寄存器搬到內存(stack)中
  52:   2300            movs    r3, #0 //將0的值放入r3暫存器中
  54:   617b            str     r3, [r7, #20] //表示將r3的值存入(r7-8)所指向的位址中 （表 0） 從寄存器搬到內存(stack)中
  56:   2300            movs    r3, #0 //將0的值放入r3暫存器中
  58:   613b            str     r3, [r7, #16] //表示將r3的值存入(r7-8)所指向的位址中 （表 0） 從寄存器搬到內存(stack)中
  5a:   f107 030c       add.w   r3, r7, #12  //*ptrA = &A; （guess）因為位址超過12位元 故須使用add.w ？
  5e:   607b            str     r3, [r7, #4] // 將ptrA從寄存器搬到內存中
  60:   f107 0308       add.w   r3, r7, #8 //*ptrB = &B;
  64:   603b            str     r3, [r7, #0] //將ptrB從寄存器搬到內存中
  66:   1d3b            adds    r3, r7, #4  //還原回去找ptrA所在的位址
  68:   4618            mov     r0, r3 //reset_handler透過r0傳遞值
  6a:   f7ff ffcd       bl      8 <func> //呼叫func
  6e:   463b            mov     r3, r7 //因為r7又變回原來的位址了 所以r3不再是指向全域變數
  70:   4618            mov     r0, r3 //r0也不再指向全域變數
  72:   f7ff ffd7       bl      24 <funD>
  76:   687b            ldr     r3, [r7, #4]
  78:   681b            ldr     r3, [r3, #0]  //呼叫內存的值
  7a:   617b            str     r3, [r7, #20]
  7c:   683b            ldr     r3, [r7, #0]
  7e:   681b            ldr     r3, [r3, #0]
  80:   613b            str     r3, [r7, #16] 
  82:   3718            adds    r7, #24
  84:   46bd            mov     sp, r7
  86:   bd80            pop     {r7, pc}

  00000084 <B>:
  84:   00000005        andeq   r0, r0, r5

00000088 <D>:
  88:   00000005        andeq   r0, r0, r5